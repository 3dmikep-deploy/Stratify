#!/bin/bash

# G-Code Analyzer End-to-End Smoke Tests
# Tests basic functionality of the complete Docker stack

set -e

echo "🚀 Starting G-Code Analyzer Smoke Tests"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test configuration
API_BASE="http://localhost:3001"
WEB_BASE="http://localhost:3000"
NGINX_BASE="http://localhost:8080"

# Test counters
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Function to run a test
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    echo -n "Testing: $test_name... "
    TESTS_RUN=$((TESTS_RUN + 1))
    
    if eval "$test_command" > /tmp/smoke_test_output 2>&1; then
        echo -e "${GREEN}PASS${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}FAIL${NC}"
        echo "  Error: $(cat /tmp/smoke_test_output)"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
}

# Function to test HTTP endpoint
test_http() {
    local url="$1"
    local expected_code="$2"
    local description="$3"
    
    run_test "$description" "curl -s -o /dev/null -w '%{http_code}' '$url' | grep -q '$expected_code'"
}

# Function to test JSON endpoint
test_json() {
    local url="$1"
    local expected_field="$2"
    local description="$3"
    
    run_test "$description" "curl -s '$url' | jq -e '.$expected_field' > /dev/null"
}

echo ""
echo "🔍 Testing Docker Stack Status"
echo "------------------------------"

# Check if all containers are running
run_test "All containers running" "docker compose ps --format json | jq -r '.[].State' | grep -v 'running' | wc -l | grep -q '^0$'"

# Check container health
run_test "Database container healthy" "docker compose ps --format json | jq -r '.[] | select(.Service==\"database\") | .Health' | grep -q 'healthy'"
run_test "Redis container healthy" "docker compose ps --format json | jq -r '.[] | select(.Service==\"redis\") | .Health' | grep -q 'healthy'"
run_test "API container healthy" "docker compose ps --format json | jq -r '.[] | select(.Service==\"api-service\") | .Health' | grep -q 'healthy'"

echo ""
echo "🌐 Testing Direct API Endpoints"
echo "-------------------------------"

# Direct API tests
test_http "$API_BASE/health" "200" "API health endpoint"
test_json "$API_BASE/health" "status" "API health JSON response"
test_http "$API_BASE/api/files" "200" "API files endpoint"

# Test 404 handling
test_http "$API_BASE/nonexistent" "404" "API 404 handling"

echo ""
echo "🔄 Testing Nginx Proxy"
echo "----------------------"

# Nginx proxy tests
test_http "$NGINX_BASE/health" "200" "Nginx proxy to API health"
test_http "$NGINX_BASE/" "200" "Nginx proxy to web dashboard"
test_http "$NGINX_BASE/api/files" "200" "Nginx proxy to API endpoints"

echo ""
echo "🖥️  Testing Web Dashboard"
echo "-------------------------"

# Web dashboard tests
test_http "$WEB_BASE/" "200" "Web dashboard main page"
test_http "$WEB_BASE/static/js" "404" "Web dashboard serves static files (404 expected for non-existent path)"

echo ""
echo "📊 Testing Monitoring Stack"
echo "---------------------------"

# Monitoring stack tests
test_http "http://localhost:9090/api/v1/status/config" "200" "Prometheus API"
test_http "http://localhost:3030/api/health" "200" "Grafana health"

echo ""
echo "🗄️  Testing Database Connectivity"
echo "--------------------------------"

# Database tests
run_test "Database connection" "docker compose exec -T database psql -U analyzer_user -d gcode_analyzer -c 'SELECT 1;' > /dev/null"
run_test "Database tables exist" "docker compose exec -T database psql -U analyzer_user -d gcode_analyzer -c '\dt' | grep -q 'analyses'"

echo ""
echo "🔄 Testing Cache Connectivity"
echo "-----------------------------"

# Redis tests
run_test "Redis ping" "docker compose exec -T redis redis-cli ping | grep -q 'PONG'"
run_test "Redis info" "docker compose exec -T redis redis-cli info server | grep -q 'redis_version'"

echo ""
echo "📤 Testing File Upload Flow"
echo "---------------------------"

# Create a minimal test G-code file
cat > /tmp/test.gcode << 'EOF'
; Test G-code file for smoke testing
; Generated by G-Code Analyzer Smoke Test
G90 ; Absolute positioning
G21 ; Set units to millimeters
M104 S200 ; Set hotend temperature
M140 S60 ; Set bed temperature
G28 ; Home all axes
G1 Z0.3 F3000 ; Move to first layer
G1 X10 Y10 E5 F1500 ; Test extrusion move
G1 X20 Y20 E10 F1500 ; Another test move
M104 S0 ; Turn off hotend
M140 S0 ; Turn off bed
G28 X0 Y0 ; Home X and Y
M84 ; Disable steppers
EOF

# Test file upload (this would require more complex setup for full testing)
run_test "Test G-code file created" "test -f /tmp/test.gcode && test -s /tmp/test.gcode"

echo ""
echo "📈 Testing API Response Times"
echo "-----------------------------"

# Performance tests
run_test "API health response < 1s" "timeout 1s curl -s '$API_BASE/health' > /dev/null"
run_test "Web dashboard response < 2s" "timeout 2s curl -s '$WEB_BASE/' > /dev/null"

echo ""
echo "🧹 Cleanup"
echo "----------"

# Cleanup test files
rm -f /tmp/test.gcode
rm -f /tmp/smoke_test_output

echo ""
echo "📋 Test Results Summary"
echo "======================="
echo -e "Total tests run: ${YELLOW}$TESTS_RUN${NC}"
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n🎉 ${GREEN}All smoke tests passed!${NC}"
    echo "The G-Code Analyzer stack is running correctly."
    exit 0
else
    echo -e "\n❌ ${RED}Some tests failed!${NC}"
    echo "Please check the failed tests and fix any issues."
    exit 1
fi
